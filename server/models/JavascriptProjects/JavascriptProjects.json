[
    {
        "title": "Tic Tac Toe Game",
        "codeURL": "https://github.com/natac13/Tic-Tac-Toe-Game",
        "demoURL": "http://natac13.github.io/Tic-Tac-Toe-Game/",
        "description": "Built with <a href='https://facebook.github.io/react/'>React</a> and <a href='https://github.com/rackt/redux'>Redux</a> which I find incredible to work with. The build process used Webpack to bundle everything up. This was my last project before I was able to the <a href='http://www.freecodecamp.com/natac13/front-end-certification'>Front-end Certificate</a> from Free Code Camp. The AI was the tricky part in the app. I found a <a href='http://stackoverflow.com/questions/125557/what-algorithm-for-a-tic-tac-toe-game-can-i-use-to-determine-the-best-move-for'>stackoverflow.com</a> answer which laid out 8 rules to follow to never lose at Tic Tac Toe. I turned these into <a href='https://github.com/natac13/Tic-Tac-Toe-Game/blob/gh-pages/app/utils/compTurn.js#L35-L42'>functions</a> (<a href='https://github.com/natac13/Tic-Tac-Toe-Game/tree/gh-pages/app/utils/AI'>defined here</a>) which will either return the square for the computer to occupy or false so that the next 'rule' function is called. I will admit these were changed a few times after sending the game out for testing in the local developer community. I was even fortunate to get a video from one of the testers showing me how he was able to beat the game. However as it stands none of original testers can beat my implementation. <em>Can you?</em>",
        "image": "TicTacToe.png",
        "alt": "Tic Tac Toe Game"
    },
    {
        "title": "Markdown Previewer",
        "codeURL": "https://github.com/natac13/Markdown-Previewer-React",
        "demoURL": "http://natac13.github.io/Markdown-Previewer-React/",
        "description": "Free Code Camp's first <a href='https://facebook.github.io/react/'>React</a> + <a href='http://sass-lang.com/'>Sass</a> application, as well as the tutorial project on the React site. A simple project to get introduced to React. However this was not my first. After leading about CSS modules and how to structure the components in there own folders, this project was a nice way to dive into those best practices. I was able to lead about using <a href='https://github.com/commitizen/cz-cli'>commitizen</a> to write better commits as well as getting more comfortable with a more solid workflow (deploying with <a href='https://github.com/tschaub/gh-pages'>gh-pages</a>, dev vs prod webpack config, etc).",
        "image": "MarkdownPreviewer.png",
        "alt": "Markdown Previewer"
    },
    {
        "title": "Wikipedia Mock Search",
        "codeURL": "https://github.com/natac13/WikiSearch",
        "demoURL": "",
        "description": "This application is using Wikipedia's api system to do a search through their records. This was my first crack at a <a href='https://facebook.github.io/react/'>React.js</a> application. I was able to simplify my build process by learning <a href='https://webpack.github.io/'>Webpack</a>; which handled ES6 transpiling, as well as the JSX transformation. This app is running off a node back-end which allows me to run it on heroku. After getting introduced to Webpack via this project, I have now adapted it to run my entire build process. The config file is quite different from the streams and <code>.pipe()</code> commands used in <a href='http://gulpjs.com/'>gulp</a>, but it is a way that has me focused on writing code and not setting up the environment.",
        "image": "wikiSearch.png",
        "alt": "Wikipedia Mock Search Engine"
    },
    {
        "title": "Simon Game",
        "codeURL": "http://github.com/natac13/simon-game",
        "demoURL": "",
        "description": "My Simon Game project. For this project I used the module pattern with ES6 <code>import</code> to separate the JavaScript files which really helped me when it came to testing with <a href='http://jasmine.github.io/'>Jasmine</a>. Learning that I can write my test files in ES6 and not have to transpile to ES5. The trouble with this project came when I was thinking of how to 'listen' for the users click and then test that to the played sequence. At first I thought of using a <code>setTimeout()</code> but could not think of where to go from there. It came to me to just run a <code>test()</code> function after the user clicks a panel and compare the two arrays. If they differ then there is a fail. On the other hand if they are the same length and match then advance to next level.",
        "image": "simon_game.png",
        "alt": "Simon Game"
    },
    {
        "title": "Free Code Camp Latest News",
        "codeURL": "https://github.com/natac13/FCC-news-feed",
        "demoURL": "http://codepen.io/natac13/full/ZbOWpV",
        "description": "The latest news stories posted to Free Code Camp by the campers. The Free Code Camp community is <span class='bold'>extremely</span> passionate about sharing resources such as blog posts, free assets for a website, and other tutorials that help aid in the learning process. This app displays the news stories with all the relevant information from the FCC api. There are <span class='bold'>4</span> <a href='https://angularjs.org/'>AngularJS</a> filters that a user can use to display the list in different ways: (by date, author, how many likes). Throughout this project I was able to get an understanding of testing <a href='https://angularjs.org/'>AngularJS</a> controllers and filters with <a href='http://jasmine.github.io/'>Jasmine</a> being run by <a href='https://github.com/karma-runner/karma-jasmine'>Karma</a>.",
        "image": "fcc-news.png",
        "alt": "Free Code Camp News"
    },
    {
        "title": "TwitchTV Streaming App",
        "codeURL": "https://github.com/natac13/twitch-tv-app-fcc",
        "demoURL": "http://codepen.io/natac13/full/OyMVpo",
        "description": "A challenge from Free Code Camp's material is this TwitchTv streaming app. The goal here is to display to the user which streamer is online. This was the first time I wrote a program with <a href='https://angularjs.org/'>AngularJS</a>. I must say it was a dream once I got an understanding of AngularJS. Using the ng-repeat nicely cleans up a bulky HTML document. With this app I also explored the <a href='https://jqueryui.com/'>jQuery UI</a> library, which adds fun to use click events!",
        "image": "twitchTV.png",
        "alt": "Twitch Online Viewer"
    },
    {
        "title": "Pomodoro Timer",
        "codeURL": "https://github.com/natac13/Pomodoro-Timer",
        "demoURL": "http://codepen.io/natac13/full/VvZewQ?editors=100",
        "description": "My first app using <a href='http://getbootstrap.com/'>Bootstrap</a>. The ability to have something handle the basic layout and setup of DOM elements really helped me get to writing the JavaScript code faster. The project explores the world of <code>setInerval()</code> and how one goes about dealing with pausing the interval and restarting it all together. During my time on the Free Code Camp Chat help rooms I find the biggest struggle campers have on this one is having the <code>setInerval()</code> id assigned to a variable that is scoped to a function. Leading to the inability of stopping the interval by calling <code>clearInerval()</code>. After reading through <a href='http://www.amazon.ca/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742'> Douglas Crockford's JavaScript The Good Parts</a> I realized I should have used a better way of handling the global variables. The plan could have been as simple as have one global object to contain the variables I want to access from anywhere.",
        "image": "pomodoro-timer.png",
        "alt": "Pomodoro Timer"
    },
    {
        "title": "Local Weather",
        "codeURL": "https://gist.github.com/natac13/628e1f2774d332c5d750",
        "demoURL": "http://codepen.io/natac13/full/qdvyMg/",
        "description": "The weather app was my first challenge from Free Code Camp which drove me to learning about APIs and how to use JavaScript and <a href='https://jquery.com/'>jQuery</a> to fetch data via the <code>.getJSON()</code>. The struggles that I overcame through completing this project were dealing with the units, either Celsius or Fahrenheit and applying a CSS class to style the convert button.",
        "image": "weather-app.png",
        "alt": "Local Weather App"
    },
    {
        "title": "Calculator",
        "codeURL": "https://github.com/natac13/calculator-viner",
        "demoURL": "http://codepen.io/natac13/full/xwwWve",
        "description": "Idea for this Calculator came from a friend of mine who wanted a more personal touch when he needed to use a calculator. After finding out the color scheme and the basic layout that he wanted I came back to him with this app for him. The down side to this app so far is the inability to work with more than 2 numbers before hitting equals button. This is an error from myself that I plan to fix in the future",
        "image": "calculator.png",
        "alt": "Calculator"
    },
    {
        "title": "Random Quote Machine",
        "codeURL": "http://codepen.io/natac13/pen/vOPpjg",
        "demoURL": "http://codepen.io/natac13/full/vOPpjg",
        "description": "Free Code Camp's first project challenge! Looking back now after learning about APIs I realize that using a random quote API would have been more <span class='bold'>random</span> lol. However I can recall the sweat just pouring down my face as I looked a blank screen to somehow come up with my first app. To complete the project I made my own list of quotes and then had a random function which would could one and using <a href='https://jquery.com/'>jQuery</a> for the first time got that data into the DOM elements.",
        "image": "random-quote.png",
        "alt": "Random Quote Machine"
    }
]
